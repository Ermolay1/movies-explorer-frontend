{"ast":null,"code":"var _s = $RefreshSig$();\n/*import { useState, useCallback } from 'react';\nimport isEmail from 'validator/es/lib/isEmail';\n\nexport default function useFormWithValidation() {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(false);\n\n  const handleChange = (e) => {\n    const input = e.target;\n    console.log(input.value)\n    const { value, name } = input;\n\n    if (name === 'name' && input.validity.patternMismatch) {\n      input.setCustomValidity('Имя должно содержать только латиницу, кириллицу, пробел или дефис.')\n    } else {\n      input.setCustomValidity('');\n    }\n\n    if (name === 'email') {\n      if (!isEmail(value)) {\n          input.setCustomValidity('Некорректый адрес почты.');\n      } else {\n          input.setCustomValidity('');\n      }\n    }\n\n    setValues({ ...values, [name]: value }); \n    setErrors({ ...errors, [name]: input.validationMessage }); \n    setIsValid(input.closest('form').checkValidity()); \n  };\n  const resetForm = useCallback(\n    (newValues = {}, newErrors = {}, newIsValid = false) => { \n      setValues(newValues);\n      setErrors(newErrors);\n      setIsValid(newIsValid);\n    },\n    [setValues, setErrors, setIsValid]\n  );\n\n  return { values, errors, isValid, handleChange, resetForm, setIsValid };\n}*/\nimport { useState, useCallback } from 'react';\nimport isEmail from 'validator/lib/isEmail';\nexport default function useFormWithValidation() {\n  _s();\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(false);\n  const handleChange = event => {\n    const target = event.target;\n    const {\n      name,\n      value\n    } = target;\n    setValues({\n      ...values,\n      [name]: value\n    });\n    setErrors({\n      ...errors,\n      [name]: target.validationMessage\n    });\n    setIsValid(target.closest(\"form\").checkValidity());\n    if (target.closest(\"form\").checkValidity() && name === 'email' && !isEmail(value)) {\n      setErrors({\n        ...errors,\n        [name]: 'Введена невалидная почта'\n      });\n      setIsValid(false);\n    }\n  };\n  const resetForm = useCallback(function () {\n    let newValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let newErrors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let newIsValid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    setValues(newValues);\n    setErrors(newErrors);\n    setIsValid(newIsValid);\n  }, [setValues, setErrors, setIsValid]);\n  return {\n    values,\n    setValues,\n    handleChange,\n    errors,\n    isValid,\n    setIsValid,\n    resetForm\n  };\n}\n_s(useFormWithValidation, \"msMIfc7pG71dSFDSlZa7+l3GN6k=\");","map":{"version":3,"names":["useState","useCallback","isEmail","useFormWithValidation","_s","values","setValues","errors","setErrors","isValid","setIsValid","handleChange","event","target","name","value","validationMessage","closest","checkValidity","resetForm","newValues","arguments","length","undefined","newErrors","newIsValid"],"sources":["C:/Users/Леха/Documents/dev/first-project/movies-explorer-frontend/src/hook/useFormWithValidation.jsx"],"sourcesContent":["/*import { useState, useCallback } from 'react';\nimport isEmail from 'validator/es/lib/isEmail';\n\nexport default function useFormWithValidation() {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(false);\n\n  const handleChange = (e) => {\n    const input = e.target;\n    console.log(input.value)\n    const { value, name } = input;\n\n    if (name === 'name' && input.validity.patternMismatch) {\n      input.setCustomValidity('Имя должно содержать только латиницу, кириллицу, пробел или дефис.')\n    } else {\n      input.setCustomValidity('');\n    }\n\n    if (name === 'email') {\n      if (!isEmail(value)) {\n          input.setCustomValidity('Некорректый адрес почты.');\n      } else {\n          input.setCustomValidity('');\n      }\n    }\n\n    setValues({ ...values, [name]: value }); \n    setErrors({ ...errors, [name]: input.validationMessage }); \n    setIsValid(input.closest('form').checkValidity()); \n  };\n  const resetForm = useCallback(\n    (newValues = {}, newErrors = {}, newIsValid = false) => { \n      setValues(newValues);\n      setErrors(newErrors);\n      setIsValid(newIsValid);\n    },\n    [setValues, setErrors, setIsValid]\n  );\n\n  return { values, errors, isValid, handleChange, resetForm, setIsValid };\n}*/\nimport { useState, useCallback } from 'react';\nimport isEmail from 'validator/lib/isEmail';\n\nexport default function useFormWithValidation() {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(false);\n\n  const handleChange = (event) => {\n    const target = event.target;\n    const { name, value } = target;\n    setValues({...values, [name]: value});\n    setErrors({...errors, [name]: target.validationMessage });\n    setIsValid(target.closest(\"form\").checkValidity());\n    if (target.closest(\"form\").checkValidity() && name === 'email' && !isEmail(value)) {\n      setErrors({...errors, [name]: 'Введена невалидная почта' })\n      setIsValid(false);\n    }\n  };\n\n  const resetForm = useCallback(\n    (newValues = {}, newErrors = {}, newIsValid = false) => {\n      setValues(newValues);\n      setErrors(newErrors);\n      setIsValid(newIsValid);\n    },\n    [setValues, setErrors, setIsValid]\n  );\n\n  return { values, setValues, handleChange, errors, isValid, setIsValid, resetForm };\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,OAAOC,OAAO,MAAM,uBAAuB;AAE3C,eAAe,SAASC,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAC9C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMW,YAAY,GAAIC,KAAK,IAAK;IAC9B,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAM;IAC3B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,MAAM;IAC9BP,SAAS,CAAC;MAAC,GAAGD,MAAM;MAAE,CAACS,IAAI,GAAGC;IAAK,CAAC,CAAC;IACrCP,SAAS,CAAC;MAAC,GAAGD,MAAM;MAAE,CAACO,IAAI,GAAGD,MAAM,CAACG;IAAkB,CAAC,CAAC;IACzDN,UAAU,CAACG,MAAM,CAACI,OAAO,CAAC,MAAM,CAAC,CAACC,aAAa,CAAC,CAAC,CAAC;IAClD,IAAIL,MAAM,CAACI,OAAO,CAAC,MAAM,CAAC,CAACC,aAAa,CAAC,CAAC,IAAIJ,IAAI,KAAK,OAAO,IAAI,CAACZ,OAAO,CAACa,KAAK,CAAC,EAAE;MACjFP,SAAS,CAAC;QAAC,GAAGD,MAAM;QAAE,CAACO,IAAI,GAAG;MAA2B,CAAC,CAAC;MAC3DJ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMS,SAAS,GAAGlB,WAAW,CAC3B,YAAwD;IAAA,IAAvDmB,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEG,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEI,UAAU,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACjDf,SAAS,CAACc,SAAS,CAAC;IACpBZ,SAAS,CAACgB,SAAS,CAAC;IACpBd,UAAU,CAACe,UAAU,CAAC;EACxB,CAAC,EACD,CAACnB,SAAS,EAAEE,SAAS,EAAEE,UAAU,CACnC,CAAC;EAED,OAAO;IAAEL,MAAM;IAAEC,SAAS;IAAEK,YAAY;IAAEJ,MAAM;IAAEE,OAAO;IAAEC,UAAU;IAAES;EAAU,CAAC;AACpF;AAACf,EAAA,CA3BuBD,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}