{"ast":null,"code":"class MainApi {\n  constructor(basePath, token) {\n    this._basePath = basePath;\n    this._token = token;\n  }\n  _getHeaders() {\n    return {\n      \"Content-type\": \"application/json\",\n      authorization: this._token\n    };\n  }\n  _getJson(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getCurrentUser() {\n    const token = localStorage.getItem(\"jwt\");\n    return fetch(`${this._basePath}/users/me `, {\n      headers: {\n        \"Content-type\": \"application/json\",\n        authorization: `Bearer ${token}`\n      }\n    }).then(this._getJson);\n  }\n  updateUser(name, email) {\n    return fetch(`${this._basePath}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email\n      })\n    }).then(res => this._getJson(res));\n  }\n  addNewMovie(data) {\n    return fetch(`${this._basePath}/movies`, {\n      method: 'POST',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        year: data.year,\n        description: data.description,\n        image: data.image,\n        trailerLink: data.trailerLink,\n        thumbnail: data.thumbnail,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN\n      })\n    }).then(res => this._getJson(res));\n  }\n\n  // удаление фильма из сохранённых\n  deleteMovie(data) {\n    return fetch(`${this._basePath}/movies/${data}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(res => this._getJson(res));\n  }\n  getSavedMovies() {\n    return fetch(`${this._basePath}/movies`, {\n      method: 'GET',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(res => this._getJson(res));\n  }\n}\nconst mainApi = new MainApi('https://api.movies.neydy.nomoreparties.sbs');\nexport default mainApi;","map":{"version":3,"names":["MainApi","constructor","basePath","token","_basePath","_token","_getHeaders","authorization","_getJson","res","ok","json","Promise","reject","status","getCurrentUser","localStorage","getItem","fetch","headers","then","updateUser","name","email","method","body","JSON","stringify","addNewMovie","data","country","director","duration","year","description","image","trailerLink","thumbnail","movieId","id","nameRU","nameEN","deleteMovie","getSavedMovies","mainApi"],"sources":["C:/Users/Леха/Documents/dev/first-project/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["class MainApi {\n  constructor(basePath, token) {\n    this._basePath = basePath;\n    this._token = token;\n  }\n  _getHeaders() {\n    return {\n      \"Content-type\": \"application/json\",\n      authorization: this._token,\n    };\n  }\n  _getJson(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n\n  getCurrentUser() {\n    const token = localStorage.getItem(\"jwt\");\n    return fetch(`${this._basePath}/users/me `, {\n      headers: {\n      \"Content-type\": \"application/json\",\n      authorization: `Bearer ${token}`,\n      }\n    }).then(this._getJson);\n  }\n\n  updateUser(name, email) {\n    return fetch(`${this._basePath}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name, email }),\n    }).then(res => this._getJson(res));\n  }\n\n  addNewMovie(data) {\n    return fetch(`${this._basePath}/movies`, {\n      method: 'POST',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        year: data.year,\n        description: data.description,\n        image: data.image,\n        trailerLink: data.trailerLink,\n        thumbnail: data.thumbnail,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN,\n      }),\n    }).then(res => this._getJson(res));\n  }\n\n  // удаление фильма из сохранённых\n  deleteMovie(data) {\n    return fetch(`${this._basePath}/movies/${data}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n      },\n    }).then(res => this._getJson(res));\n  }\n\n  getSavedMovies() {\n    return fetch(`${this._basePath}/movies`, {\n      method: 'GET',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n      },\n    }).then(res => this._getJson(res));\n  }\n}\n\n\nconst mainApi = new MainApi('https://api.movies.neydy.nomoreparties.sbs');\n\n  export default mainApi;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}